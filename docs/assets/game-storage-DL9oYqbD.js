class l{constructor(){this.storageKey="blockdoku_game_data",this.settingsKey="blockdoku_settings",this.highScoresKey="blockdoku_high_scores",this.difficultyOverridesKey="blockdoku_difficulty_overrides",this.maxHighScores=10,this.migrateLegacyKeys()}saveGameState(e){try{const t={board:e.board,score:e.score,level:e.level,currentBlocks:e.currentBlocks,selectedBlock:e.selectedBlock,timestamp:Date.now()};return localStorage.setItem(this.storageKey,JSON.stringify(t)),!0}catch(t){return console.error("Failed to save game state:",t),!1}}loadGameState(){try{const e=localStorage.getItem(this.storageKey);if(e){const t=JSON.parse(e),r=24*60*60*1e3;if(Date.now()-t.timestamp<r)return t;this.clearGameState()}return null}catch(e){return console.error("Failed to load game state:",e),null}}clearGameState(){try{return localStorage.removeItem(this.storageKey),!0}catch(e){return console.error("Failed to clear game state:",e),!1}}saveHighScore(e){try{const t=this.getHighScores(),r={score:e.score,level:e.level,linesCleared:e.linesCleared,combo:e.combo,maxCombo:e.maxCombo,difficulty:e.difficulty||"normal",timestamp:Date.now(),date:new Date().toLocaleDateString(),totalCombos:e.totalCombos||0,maxStreakCount:e.maxStreakCount||0,difficultyMultiplier:e.difficultyMultiplier||1,breakdown:e.breakdown||{linePoints:0,squarePoints:0,comboBonusPoints:0,placementPoints:0,streakBonusPoints:0},rowClears:e.rowClears||0,columnClears:e.columnClears||0,squareClears:e.squareClears||0,petrificationStats:e.petrificationStats,enablePetrification:e.enablePetrification,speedStats:e.speedStats,speedMode:e.speedMode||"ignored",countdownEnabled:e.countdownEnabled||!1,countdownDuration:e.countdownDuration||3,timeRemaining:e.timeRemaining,timeLimit:e.timeLimit,piecesPlaced:e.piecesPlaced||0,pointsPerPiece:e.pointsPerPiece||0,prizeRecognitionEnabled:e.prizeRecognitionEnabled!==!1,prize:e.prize,nextPrize:e.nextPrize,nextPrizeProgress:e.nextPrizeProgress||0,nextPrizePointsNeeded:e.nextPrizePointsNeeded||0};return t.push(r),t.sort((o,s)=>s.score-o.score),t.splice(this.maxHighScores),localStorage.setItem(this.highScoresKey,JSON.stringify(t)),!0}catch(t){return console.error("Failed to save high score:",t),!1}}getHighScores(){try{const e=localStorage.getItem(this.highScoresKey);return e?JSON.parse(e):[]}catch(e){return console.error("Failed to load high scores:",e),[]}}getBestScoresByDifficulty(){const e=this.getHighScores(),t={easy:0,normal:0,hard:0,expert:0};for(const r of e){const o=r.difficulty||"normal";t[o]!==void 0&&r.score>t[o]&&(t[o]=r.score)}return t}isHighScore(e){var r;const t=this.getHighScores();return t.length<this.maxHighScores||e>((r=t[t.length-1])==null?void 0:r.score)}saveSettings(e){try{return localStorage.setItem(this.settingsKey,JSON.stringify(e)),!0}catch(t){return console.error("Failed to save settings:",t),!1}}loadSettings(){try{const e=localStorage.getItem(this.settingsKey);return e?JSON.parse(e):this.getDefaultSettings()}catch(e){return console.error("Failed to load settings:",e),this.getDefaultSettings()}}getDefaultSettings(){const e={theme:"wood",soundEnabled:!1,animationsEnabled:!0,difficulty:"normal",blockHoverEffects:!0,blockSelectionGlow:!0,blockEntranceAnimations:!0,blockPlacementAnimations:!1,particleEffects:!0,animationSpeed:"normal",autoSave:!0,enableHints:!1,enableTimer:!1,countdownDuration:3,speedTimerDuration:10,enablePetrification:!1,enableDeadPixels:!1,deadPixelsIntensity:0,enableUndo:!1,showPoints:!1,showPlacementPoints:!1,showPersonalBests:!1,comboDisplayMode:"cumulative",speedMode:"bonus",speedDisplayMode:"timer",speedTimerPrecision:"seconds",pieceTimeoutEnabled:!1,enableMagicBlocks:!1,enableWildShapes:!1,autoRotateBlocks:!1,gameMode:"classic"};return console.log("Returning default settings with difficulty:",e.difficulty),e}saveStatistics(e){try{const t="blockdoku_statistics",r=this.loadStatistics(),o={gamesPlayed:(r.gamesPlayed||0)+1,totalScore:(r.totalScore||0)+e.score,totalLinesCleared:(r.totalLinesCleared||0)+e.linesCleared,maxCombo:Math.max(r.maxCombo||0,e.maxCombo),totalCombos:(r.totalCombos||0)+(e.totalCombos||0),bestScore:Math.max(r.bestScore||0,e.score),lastPlayed:Date.now()};return localStorage.setItem(t,JSON.stringify(o)),!0}catch(t){return console.error("Failed to save statistics:",t),!1}}loadStatistics(){try{const e=localStorage.getItem("blockdoku_statistics");return e?JSON.parse(e):{gamesPlayed:0,totalScore:0,totalLinesCleared:0,maxCombo:0,totalCombos:0,bestScore:0,lastPlayed:null}}catch(e){return console.error("Failed to load statistics:",e),{gamesPlayed:0,totalScore:0,totalLinesCleared:0,maxCombo:0,totalCombos:0,bestScore:0,lastPlayed:null}}}clearAllData(){try{return localStorage.removeItem(this.storageKey),localStorage.removeItem(this.settingsKey),localStorage.removeItem(this.highScoresKey),localStorage.removeItem("blockdoku_statistics"),!0}catch(e){return console.error("Failed to clear all data:",e),!1}}clearStatistics(){try{return localStorage.removeItem("blockdoku_statistics"),!0}catch(e){return console.error("Failed to clear statistics:",e),!1}}clearHighScores(){try{return localStorage.removeItem(this.highScoresKey),!0}catch(e){return console.error("Failed to clear high scores:",e),!1}}getStorageSize(){try{let e=0;for(let t in localStorage)t.startsWith("blockdoku_")&&(e+=localStorage[t].length);return e}catch(e){return console.error("Failed to calculate storage size:",e),0}}exportData(){try{const e={gameState:this.loadGameState(),settings:this.loadSettings(),highScores:this.getHighScores(),statistics:this.loadStatistics(),exportDate:new Date().toISOString(),version:"1.4.0"};return JSON.stringify(e,null,2)}catch(e){return console.error("Failed to export data:",e),null}}importData(e){try{const t=JSON.parse(e);return t.gameState&&this.saveGameState(t.gameState),t.settings&&this.saveSettings(t.settings),t.highScores&&localStorage.setItem(this.highScoresKey,JSON.stringify(t.highScores)),t.statistics&&localStorage.setItem("blockdoku_statistics",JSON.stringify(t.statistics)),!0}catch(t){return console.error("Failed to import data:",t),!1}}migrateLegacyKeys(){try{const t=localStorage.getItem("blockdoku-settings"),r=localStorage.getItem(this.settingsKey);t&&!r&&localStorage.setItem(this.settingsKey,t);const s=localStorage.getItem("blockdoku_game_state"),a=localStorage.getItem(this.storageKey);s&&!a&&localStorage.setItem(this.storageKey,s)}catch(e){console.warn("GameStorage migration skipped due to error:",e)}}loadDifficultyOverrides(){try{const e=localStorage.getItem(this.difficultyOverridesKey);return e?JSON.parse(e):{}}catch(e){return console.error("Failed to load difficulty overrides:",e),{}}}saveDifficultyOverrides(e){try{return localStorage.setItem(this.difficultyOverridesKey,JSON.stringify(e)),!0}catch(t){return console.error("Failed to save difficulty overrides:",t),!1}}clearDifficultyOverrides(){try{return localStorage.removeItem(this.difficultyOverridesKey),!0}catch(e){return console.error("Failed to clear difficulty overrides:",e),!1}}loadProgressModeData(){try{const e=localStorage.getItem("blockdoku_progress_mode");return e?JSON.parse(e):null}catch(e){return console.error("Failed to load progress mode data:",e),null}}saveProgressModeData(e){try{return localStorage.setItem("blockdoku_progress_mode",JSON.stringify(e)),!0}catch(t){return console.error("Failed to save progress mode data:",t),!1}}clearProgressModeData(){try{return localStorage.removeItem("blockdoku_progress_mode"),!0}catch(e){return console.error("Failed to clear progress mode data:",e),!1}}}export{l as G};
