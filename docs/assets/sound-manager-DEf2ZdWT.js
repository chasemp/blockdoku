class c{constructor(){this.audioContext=null,this.isEnabled=!1,this.volume=.5,this.sounds={},this.soundPresets={},this.customSoundMappings={},this.init()}init(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.createSoundPresets(),this.loadCustomSoundMappings(),this.createSounds()}catch(e){console.warn("Web Audio API not supported:",e),this.isEnabled=!1}}loadCustomSoundMappings(){try{const e=localStorage.getItem("blockdoku_sound_mappings");e&&(this.customSoundMappings=JSON.parse(e))}catch(e){console.warn("Failed to load sound mappings:",e)}}saveSoundMappings(){try{localStorage.setItem("blockdoku_sound_mappings",JSON.stringify(this.customSoundMappings))}catch(e){console.warn("Failed to save sound mappings:",e)}}setCustomSound(e,a){a==="default"||a===null?delete this.customSoundMappings[e]:this.customSoundMappings[e]=a,this.saveSoundMappings(),this.createSounds()}getAvailablePresets(){return{default:{name:"Default",description:"Standard game sound"},chime:{name:"Chime",description:"Gentle bell-like tone"},beep:{name:"Beep",description:"Electronic beep"},pop:{name:"Pop",description:"Quick pop sound"},swoosh:{name:"Swoosh",description:"Whoosh effect"},ding:{name:"Ding",description:"High-pitched ding"},thud:{name:"Thud",description:"Low bass thump"},click:{name:"Click",description:"Sharp click sound"}}}createSoundPresets(){this.audioContext&&(this.soundPresets={chime:this.createChimePreset(),beep:this.createBeepPreset(),pop:this.createPopPreset(),swoosh:this.createSwooshPreset(),ding:this.createDingPreset(),thud:this.createThudPreset(),click:this.createClickPreset()})}setEnabled(e){this.isEnabled=e}setVolume(e){this.volume=Math.max(0,Math.min(1,e))}createSounds(){if(!this.audioContext)return;const e=(a,t)=>{const n=this.customSoundMappings[a];return n==="none"?null:n&&this.soundPresets[n]?this.soundPresets[n]:t.call(this)};this.sounds={blockPlace:e("blockPlace",this.createBlockPlaceSound),lineClear:e("lineClear",this.createLineClearSound),levelUp:e("levelUp",this.createLevelUpSound),combo:e("combo",this.createComboSound),speedBonus:e("speedBonus",this.createSpeedBonusSound),error:e("error",this.createErrorSound),buttonClick:e("buttonClick",this.createButtonClickSound),blockRotate:e("blockRotate",this.createBlockRotateSound),scoreGain:e("scoreGain",this.createScoreGainSound),timeWarning:e("timeWarning",this.createTimeWarningSound),timeCritical:e("timeCritical",this.createTimeCriticalSound),timeBonus:e("timeBonus",this.createTimeBonusSound),hint:e("hint",this.createHintSound),undo:e("undo",this.createUndoSound),redo:e("redo",this.createRedoSound),perfect:e("perfect",this.createPerfectSound),chain:e("chain",this.createChainSound),emptyGridBonus:e("emptyGridBonus",this.createEmptyGridBonusSound)}}getSoundEffects(){return{blockPlace:{name:"Block Placement",description:"When placing a block on the board"},lineClear:{name:"Line Clear",description:"When clearing lines"},levelUp:{name:"Level Up",description:"When advancing to next level"},combo:{name:"Combo",description:"When achieving a combo"},speedBonus:{name:"Speed Bonus",description:"When earning speed bonus points"},error:{name:"Error",description:"When an invalid action occurs"},buttonClick:{name:"Button Click",description:"Button press feedback"},blockRotate:{name:"Block Rotate",description:"When rotating a block"},scoreGain:{name:"Score Gain",description:"When earning points"},timeWarning:{name:"Time Warning",description:"Low time warning"},timeCritical:{name:"Time Critical",description:"Very low time alert"},timeBonus:{name:"Time Bonus",description:"Bonus time awarded"},hint:{name:"Hint",description:"When using a hint"},undo:{name:"Undo",description:"Undo action"},redo:{name:"Redo",description:"Redo action"},perfect:{name:"Perfect Clear",description:"Perfect board clear"},chain:{name:"Chain",description:"Chain combo effect"},emptyGridBonus:{name:"Empty Grid Bonus",description:"When earning empty grid bonus points"}}}getGroupedSoundEffects(){return{events:{name:"Events",description:"General gameplay actions like block placement and UI interactions",sounds:["blockPlace","blockRotate","buttonClick","undo","redo","hint"]},success:{name:"Success",description:"Achievements, rewards, and successful actions",sounds:["lineClear","levelUp","combo","speedBonus","scoreGain","perfect","chain","timeBonus","emptyGridBonus"]},warning:{name:"Warning",description:"Time pressure alerts and urgent notifications",sounds:["timeWarning","timeCritical"]},failure:{name:"Failure",description:"Mistakes and invalid actions",sounds:["error"]}}}previewSound(e){if(!(!this.audioContext||!this.isEnabled))try{if(e==="none")return;const a=e==="default"?this.createBlockPlaceSound():this.soundPresets[e];if(!a)return;const t=this.audioContext.createBufferSource(),n=this.audioContext.createGain();t.buffer=a.buffer,t.connect(n),n.connect(this.audioContext.destination),n.gain.value=this.volume*a.volume,t.start()}catch(a){console.warn("Error previewing sound:",a)}}play(e){if(!(!this.isEnabled||!this.audioContext||!this.sounds[e]))try{const a=this.sounds[e];if(a===null)return;const t=this.audioContext.createBufferSource(),n=this.audioContext.createGain();t.buffer=a.buffer,t.connect(n),n.connect(this.audioContext.destination),n.gain.value=this.volume*a.volume,t.start()}catch(a){console.warn("Error playing sound:",a)}}createBlockPlaceSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.08,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=300-n*200;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*20)*.4}return{buffer:e,volume:.7}}createLineClearSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.3,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=400+Math.sin(n*20)*100;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*3)*.4}return{buffer:e,volume:.8}}createLevelUpSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.5,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=200+n*400;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*2)*.5}return{buffer:e,volume:.9}}createComboSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.2,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=600+Math.sin(n*30)*200;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*5)*.3}return{buffer:e,volume:.6}}createSpeedBonusSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.12,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=500+n*800,s=Math.exp(-n*8);a[t]=Math.sin(2*Math.PI*o*n)*s*.4}return{buffer:e,volume:.7}}createErrorSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.15,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=200-n*100;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*8)*.4}return{buffer:e,volume:.5}}createButtonClickSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.05,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate;a[t]=Math.sin(2*Math.PI*1e3*n)*Math.exp(-n*20)*.2}return{buffer:e,volume:.4}}createBlockRotateSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.08,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=300+Math.sin(n*50)*50;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*15)*.15}return{buffer:e,volume:.3}}createScoreGainSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.12,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=500+n*200;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*6)*.25}return{buffer:e,volume:.5}}createTimeWarningSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.2,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=300+Math.sin(n*10)*50;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*4)*.3}return{buffer:e,volume:.6}}createTimeCriticalSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.1,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=400+Math.sin(n*50)*100;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*8)*.4}return{buffer:e,volume:.7}}createTimeBonusSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.15,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=200+n*600;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*3)*.35}return{buffer:e,volume:.6}}createHintSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.25,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=150+Math.sin(n*8)*30;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*2)*.2}return{buffer:e,volume:.4}}createUndoSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.08,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=400-n*200;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*12)*.25}return{buffer:e,volume:.4}}createRedoSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.08,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=200+n*400;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*12)*.25}return{buffer:e,volume:.4}}createPerfectSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.6,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=100+n*800,s=Math.sin(2*Math.PI*o*n)+.5*Math.sin(2*Math.PI*o*2*n)+.25*Math.sin(2*Math.PI*o*3*n);a[t]=s*Math.exp(-n*1.5)*.4}return{buffer:e,volume:.8}}createChainSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.3,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=300+Math.sin(n*15)*100;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*2)*.3}return{buffer:e,volume:.5}}createEmptyGridBonusSound(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*1.2,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=200+n*400,s=Math.sin(2*Math.PI*o*n)+.6*Math.sin(2*Math.PI*o*2*n)+.4*Math.sin(2*Math.PI*o*3*n)+.2*Math.sin(2*Math.PI*o*4*n),i=1+.1*Math.sin(2*Math.PI*8*n);a[t]=s*i*Math.exp(-n*.8)*.4}return{buffer:e,volume:.6}}resume(){this.audioContext&&this.audioContext.state==="suspended"&&this.audioContext.resume()}stop(){this.audioContext&&(this.audioContext.close(),this.init())}createChimePreset(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.3,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=880;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*5)*.3+.5*Math.sin(2*Math.PI*o*2*n)*Math.exp(-n*5)*.3}return{buffer:e,volume:.7}}createBeepPreset(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.1,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate;a[t]=Math.sin(2*Math.PI*1200*n)*Math.exp(-n*15)*.3}return{buffer:e,volume:.6}}createPopPreset(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.08,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=300-n*200;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*20)*.4}return{buffer:e,volume:.7}}createSwooshPreset(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.2,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=100+n*400;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*6)*.25}return{buffer:e,volume:.5}}createDingPreset(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.25,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=1760;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*6)*.35}return{buffer:e,volume:.6}}createThudPreset(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.12,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate,o=100-n*50;a[t]=Math.sin(2*Math.PI*o*n)*Math.exp(-n*12)*.5}return{buffer:e,volume:.8}}createClickPreset(){const e=this.audioContext.createBuffer(1,this.audioContext.sampleRate*.04,this.audioContext.sampleRate),a=e.getChannelData(0);for(let t=0;t<a.length;t++){const n=t/this.audioContext.sampleRate;a[t]=Math.sin(2*Math.PI*1500*n)*Math.exp(-n*30)*.25}return{buffer:e,volume:.5}}getGroupedSoundSettings(){const e={},a=this.getGroupedSoundEffects(),t=this.customSoundMappings||{};for(const[n,o]of Object.entries(a)){const s=o.sounds.map(r=>t[r]||"default"),i=[...new Set(s)];i.length===1?e[n]=i[0]:e[n]="mixed"}return e}setGroupedSoundSettings(e,a){const n=this.getGroupedSoundEffects()[e];if(n)for(const o of n.sounds)this.setCustomSound(o,a)}previewGroupedSound(e){const t=this.getGroupedSoundEffects()[e];if(!t||t.sounds.length===0)return;const o=this.getGroupedSoundSettings()[e]||"default";this.previewSound(o)}}export{c as S};
