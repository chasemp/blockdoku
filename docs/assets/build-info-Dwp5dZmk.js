class i{constructor(){this.buildInfo=null,this.loadBuildInfo()}async loadBuildInfo(){try{const t=await fetch("./build-info.json");if(t.ok)this.buildInfo=await t.json();else throw new Error("Build info file not found")}catch{console.warn("Build info not found, using fallback"),this.buildInfo=this.getFallbackBuildInfo()}}getFallbackBuildInfo(){const t=new Date,n=t.toISOString().slice(0,16).replace(/[-:T]/g,"");return{version:"1.4.0",buildId:n,buildDate:t.toISOString(),fullVersion:`1.4.0+${n}`}}getVersion(){var t;return((t=this.buildInfo)==null?void 0:t.version)||"1.4.0"}getBuildId(){var t;return((t=this.buildInfo)==null?void 0:t.buildId)||"dev"}getFullVersion(){var t;return((t=this.buildInfo)==null?void 0:t.fullVersion)||"1.4.0+dev"}getBuildDate(){var t;return((t=this.buildInfo)==null?void 0:t.buildDate)||new Date().toISOString()}getFormattedBuildDate(){return new Date(this.getBuildDate()).toLocaleString()}getDisplayVersion(){return`v${this.getFullVersion()}`}isLoaded(){return this.buildInfo!==null}}const o=new i;export{o as b};
