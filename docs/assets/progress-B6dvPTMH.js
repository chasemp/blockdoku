import"./modulepreload-polyfill-B5Qt9EMX.js";/* empty css             *//* empty css             */import{L as o}from"./level-manager-BX9v6P63.js";import{G as c}from"./game-storage-Umaiwskq.js";class r{constructor(){this.storage=new c,this.levelManager=new o(null,this.storage),this.currentDifficulty="normal",this.selectedLevel=1,this.progressData=this.storage.loadProgressModeData()||this.getDefaultProgressData(),this.initializePage()}initializePage(){this.loadTheme(),this.setupEventListeners(),this.loadProgressData(),this.showLevelSelection(),this.renderLevelGrid(),this.renderProgressStats()}setupEventListeners(){document.getElementById("back-to-settings").addEventListener("click",()=>{window.location.href="gamesettings.html"}),document.getElementById("back-to-game").addEventListener("click",()=>{window.location.href="index.html"}),document.querySelectorAll(".difficulty-option").forEach(t=>{t.addEventListener("click",e=>{const s=e.currentTarget.dataset.difficulty;this.selectDifficulty(s)})}),document.getElementById("change-difficulty").addEventListener("click",()=>{this.showDifficultySelection()}),document.getElementById("back-to-levels").addEventListener("click",()=>{this.showLevelSelection()}),document.getElementById("start-level-btn").addEventListener("click",()=>{this.startSelectedLevel()})}selectDifficulty(t){this.currentDifficulty=t,this.showLevelSelection(),this.renderLevelGrid()}showDifficultySelection(){const t=document.getElementById("difficulty-section"),e=document.getElementById("levels-section"),s=document.getElementById("level-details");t&&(t.style.display="block"),e&&(e.style.display="none"),s&&(s.style.display="none")}showLevelSelection(){const t=document.getElementById("difficulty-section"),e=document.getElementById("levels-section"),s=document.getElementById("level-details");t&&(t.style.display="none"),e&&(e.style.display="block"),s&&(s.style.display="none")}showLevelDetails(t){this.selectedLevel=t;const e=document.getElementById("difficulty-section"),s=document.getElementById("levels-section"),l=document.getElementById("level-details");e&&(e.style.display="none"),s&&(s.style.display="none"),l&&(l.style.display="block"),this.renderLevelDetails(t)}renderDifficultySelection(){["easy","normal","hard","expert"].forEach(e=>{const s=this.getCompletedLevelsCount(e),l=document.getElementById(`${e}-completed`);l&&(l.textContent=`${s}/30`)}),document.getElementById("selected-difficulty-title").textContent=`${this.currentDifficulty.charAt(0).toUpperCase()+this.currentDifficulty.slice(1)} Levels`}renderLevelGrid(){const t=document.getElementById("levels-grid");t.innerHTML="";for(let e=1;e<=30;e++){const s=this.createLevelButton(e);t.appendChild(s)}}createLevelButton(t){const e=document.createElement("button");e.className="level-button",e.dataset.level=t;const s=this.isLevelCompleted(t,this.currentDifficulty),l=this.isLevelUnlocked(t,this.currentDifficulty);return s?e.classList.add("completed"):l||e.classList.add("locked"),e.innerHTML=`
            <div class="level-number">${t}</div>
            <div class="level-status">
                ${s?"âœ“":l?"â—‹":"ðŸ”’"}
            </div>
        `,l&&e.addEventListener("click",()=>{this.showLevelDetails(t)}),e}renderLevelDetails(t){const e=this.levelManager.getLevelDefinition(t,this.currentDifficulty);if(!e){console.error(`Level ${t} not found for difficulty ${this.currentDifficulty}`);return}document.getElementById("level-name").textContent=`Level ${t}`,document.getElementById("level-description-text").textContent="Complete the objectives to advance to the next level.";const s=document.getElementById("level-objectives-list");if(s.innerHTML="",e.objectives.scoreTarget){const i=document.createElement("li");i.textContent=`Score ${e.objectives.scoreTarget} points`,s.appendChild(i)}if(e.objectives.maxMoves){const i=document.createElement("li");i.textContent=`Complete in ${e.objectives.maxMoves} moves or less`,s.appendChild(i)}if(e.objectives.comboRequirement>0){const i=document.createElement("li");i.textContent=`Achieve ${e.objectives.comboRequirement} combos`,s.appendChild(i)}const l=document.getElementById("level-rewards-list");if(l.innerHTML="",e.rewards&&e.rewards.length>0)e.rewards.forEach(i=>{const n=document.createElement("li");n.textContent=this.formatReward(i),l.appendChild(n)});else{const i=document.createElement("li");i.textContent="Progress towards next level",l.appendChild(i)}}formatReward(t){return t.startsWith("theme:")?`Unlock ${t.split(":")[1]} theme`:t.startsWith("block:")?`Unlock ${t.split(":")[1]} block type`:t}startSelectedLevel(){this.storage.saveProgressModeData({...this.progressData,selectedLevel:this.selectedLevel,selectedDifficulty:this.currentDifficulty}),window.location.href=`index.html?mode=progress&level=${this.selectedLevel}&difficulty=${this.currentDifficulty}`}renderProgressStats(){const t=this.getTotalCompletedLevels(),e=this.getTotalAchievements(),s=this.getTotalRewards();document.getElementById("total-completed").textContent=t,document.getElementById("total-achievements").textContent=e,document.getElementById("total-rewards").textContent=s}getCompletedLevelsCount(t){var e;return this.progressData.completedLevels&&((e=this.progressData.completedLevels[t])==null?void 0:e.length)||0}getTotalCompletedLevels(){return["easy","normal","hard","expert"].reduce((e,s)=>e+this.getCompletedLevelsCount(s),0)}getTotalAchievements(){return this.progressData.achievements?Object.keys(this.progressData.achievements).length:0}getTotalRewards(){return this.progressData.unlockedRewards?this.progressData.unlockedRewards.length:0}isLevelCompleted(t,e){var s;return this.progressData.completedLevels&&((s=this.progressData.completedLevels[e])==null?void 0:s.includes(t))||!1}isLevelUnlocked(t,e){return t===1?!0:this.isLevelCompleted(t-1,e)}getDefaultProgressData(){return{completedLevels:{easy:[],normal:[],hard:[],expert:[]},achievements:{},unlockedRewards:[],selectedLevel:1,selectedDifficulty:"normal"}}loadProgressData(){const t=this.storage.loadProgressModeData();t&&(this.progressData={...this.getDefaultProgressData(),...t})}loadTheme(){const e=this.storage.loadSettings().theme||"wood";this.applyTheme(e)}applyTheme(t){console.log("Progress page applying theme:",t);const e=document.getElementById("theme-css");e&&(e.href=`css/themes/${t}.css`),document.documentElement.setAttribute("data-theme",t);const s={wood:"#8B4513",light:"#007bff",dark:"#343a40"},l=document.querySelector('meta[name="theme-color"]');l&&l.setAttribute("content",s[t]||s.wood)}}document.addEventListener("DOMContentLoaded",()=>{new r});
