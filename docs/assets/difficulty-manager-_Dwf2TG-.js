class c{constructor(e=null){this.currentDifficulty="normal",this.difficultySettings=this.initializeDifficultySettings(),this.gameRules=this.initializeGameRules(),this.game=e}initializeDifficultySettings(){return{easy:{name:"Easy",shortDescription:"Larger blocks, slower pace",description:"Larger blocks, slower pace, hints available",blockSizeRange:[2,4],allowedShapes:["square2x2","square3x3","l2x2","line2","line3"],scoreMultiplier:1.5,timeLimit:null,hintsEnabled:!0,blockGenerationDelay:2e3,visualHints:!0},normal:{name:"Normal",shortDescription:"Standard block variety, moderate pace",description:"Standard block variety, moderate pace",blockSizeRange:[1,5],allowedShapes:"all",scoreMultiplier:1,timeLimit:null,hintsEnabled:!1,blockGenerationDelay:1500,visualHints:!1},hard:{name:"Hard",shortDescription:"Smaller blocks, faster pace",description:"Smaller blocks, faster pace, no hints",blockSizeRange:[1,3],allowedShapes:["single","line2","line3","l2x2","t3x2","z3x2"],scoreMultiplier:.8,timeLimit:null,hintsEnabled:!1,blockGenerationDelay:1e3,visualHints:!1},expert:{name:"Expert",shortDescription:"Complex shapes, time pressure",description:"Complex shapes, time pressure, limited moves",blockSizeRange:[1,4],allowedShapes:"all",scoreMultiplier:.5,timeLimit:null,hintsEnabled:!1,blockGenerationDelay:800,visualHints:!1,moveLimit:50}}}getDetailedDescription(e,n){const t=this.difficultySettings[e];if(!t)return"";const s=t.shortDescription;if(!n||!n.difficultyDefaults)return s;const i=n.difficultyDefaults[e];if(!i)return s;const l=[];if(i.enableHints&&l.push("Enable Hints"),i.showPoints&&l.push("Show Block Points"),i.enableTimer&&l.push("Enable Timer"),i.enablePetrification&&l.push("Enable Petrification"),i.enableDeadPixels&&l.push("Enable Dead Pixels"),i.showPersonalBests&&l.push("Enable Personal Best"),i.showSpeedTimer&&l.push("Show Speed Timer"),i.enablePrizeRecognition&&l.push("Enable Prize Recognition"),i.pieceTimeoutEnabled&&l.push("Enable Piece Timeout"),i.speedMode&&i.speedMode!=="ignored"){const r=i.speedMode.charAt(0).toUpperCase()+i.speedMode.slice(1);l.push(`Speed Tracking: ${r}`)}return l.length>0?`${s}
Defaults: ${l.join(", ")}`:`${s}
Defaults: None`}getComparisonBubbles(e,n){if(!n||!n.difficultyDefaults)return[];const t=n.difficultyDefaults.normal||{},s=n.difficultyDefaults[e]||{};if(e==="hard"&&console.log("üîç Difficulty Defaults Comparison (Pure):",{difficulty:e,normalDefaults:{enableHints:t.enableHints,showPersonalBests:t.showPersonalBests,showSpeedTimer:t.showSpeedTimer,enableTimer:t.enableTimer},currentDefaults:{enableHints:s.enableHints,showPersonalBests:s.showPersonalBests,showSpeedTimer:s.showSpeedTimer,enableTimer:s.enableTimer}}),!t||!s||e==="normal")return[];const i=[],l=[{key:"enableHints",label:"Hints",emoji:"üí°"},{key:"showPoints",label:"Points",emoji:"üî¢"},{key:"enableTimer",label:"Countdown",emoji:"‚è≥"},{key:"showPersonalBests",label:"Best",emoji:"üèÜ"},{key:"showSpeedTimer",label:"Speed",emoji:"‚ö°"},{key:"enablePrizeRecognition",label:"Prizes",emoji:"üéâ"},{key:"pieceTimeoutEnabled",label:"Timeout",emoji:"‚è∞"},{key:"enableMagicBlocks",label:"Magic",emoji:"üîÆ"}];if(s.speedMode!==t.speedMode){const r=s.speedMode==="bonus"?"Bonus":s.speedMode==="punishment"?"Punish":"Speed";i.push({type:s.speedMode==="ignored"?"disabled":"enabled",label:r,emoji:"üèÉ"})}return l.forEach(r=>{const a=t[r.key],o=s[r.key];e==="hard"&&r.key==="enableHints"&&console.log("üîç Difficulty Comparison Debug (Pure Defaults):",{difficulty:e,settingKey:r.key,normalValue:a,currentValue:o,different:a!==o}),a!==o&&i.push({type:o?"enabled":"disabled",label:r.label,emoji:r.emoji})}),i}initializeGameRules(){return{basePoints:{single:10,line:100,combo:50},levelThresholds:{easy:[100,300,600,1e3,1500,2200,3e3,4e3,5200,6600],normal:[200,500,900,1400,2e3,2700,3500,4400,5400,6500],hard:[150,400,700,1100,1600,2200,2900,3700,4600,5600],expert:[100,250,450,700,1e3,1350,1750,2200,2700,3250]},comboThresholds:{easy:2,normal:3,hard:4,expert:5}}}setDifficulty(e){return this.difficultySettings[e]?(this.currentDifficulty=e,!0):!1}getCurrentDifficulty(){return this.currentDifficulty}getDifficultySettings(){return this.difficultySettings[this.currentDifficulty]}getScoreMultiplier(){return this.difficultySettings[this.currentDifficulty].scoreMultiplier}getTimeLimit(){if(this.game&&this.game.storage){const e=this.game.storage.loadSettings();if(e.enableTimer&&e.countdownDuration)return e.countdownDuration*60}return this.difficultySettings[this.currentDifficulty].timeLimit}isHintsEnabled(){return this.game&&this.game.enableHints?!0:this.difficultySettings[this.currentDifficulty].hintsEnabled}getBlockGenerationDelay(){return this.difficultySettings[this.currentDifficulty].blockGenerationDelay}hasVisualHints(){return this.difficultySettings[this.currentDifficulty].visualHints}getMoveLimit(){return this.difficultySettings[this.currentDifficulty].moveLimit||null}getAllowedShapes(){return this.difficultySettings[this.currentDifficulty].allowedShapes}getBlockSizeRange(){return this.difficultySettings[this.currentDifficulty].blockSizeRange}getLevelThresholds(){return this.gameRules.levelThresholds[this.currentDifficulty]}getComboThreshold(){return this.gameRules.comboThresholds[this.currentDifficulty]}calculateScore(e,n=1){const t=this.getScoreMultiplier();return Math.floor(e*t)}shouldGenerateNewBlocks(e,n){const t=this.getLevelThresholds();return n<=t.length&&e>=t[n-1]}getDifficultyInfo(){const e=this.getDifficultySettings();return{name:e.name,description:e.description,features:{hints:e.hintsEnabled,timer:e.timeLimit!==null,moveLimit:e.moveLimit!==null}}}getAvailableDifficulties(){return Object.keys(this.difficultySettings).map(e=>({key:e,...this.difficultySettings[e]}))}reset(){this.currentDifficulty="normal"}}export{c as DifficultyManager};
