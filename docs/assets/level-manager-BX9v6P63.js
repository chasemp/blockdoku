class i{constructor(e=null,t=null){this.game=e,this.storage=t,this.currentLevel=1,this.currentTier="foundation",this.completedLevels=new Set,this.unlockedRewards=new Set,this.achievements=new Map,this.loadProgress(),this.levelDefinitions=this.initializeLevelDefinitions()}initializeLevelDefinitions(){return{easy:this.createLevelDefinitions("easy"),normal:this.createLevelDefinitions("normal"),hard:this.createLevelDefinitions("hard"),expert:this.createLevelDefinitions("expert")}}createLevelDefinitions(e){const t={};for(let r=1;r<=8;r++)t[r]=this.createFoundationLevel(r,e);for(let r=9;r<=16;r++)t[r]=this.createCoreLevel(r,e);for(let r=17;r<=24;r++)t[r]=this.createAdvancedLevel(r,e);for(let r=25;r<=30;r++)t[r]=this.createExpertLevel(r,e);return t}createFoundationLevel(e,t){const r=this.getBaseScoreForLevel(e,t),s=this.getTierForLevel(e);return{id:e,name:`Foundation ${e}`,tier:s,difficulty:t,objectives:{scoreTarget:r,maxMoves:this.getMaxMovesForLevel(e,t),timeLimit:this.getTimeLimitForLevel(e,t),comboRequirement:this.getComboRequirementForLevel(e,t)},bonusObjectives:{perfectScore:Math.floor(r*1.2),speedBonus:Math.floor(r*.8),efficiencyBonus:Math.floor(this.getMaxMovesForLevel(e,t)*.7)},mechanics:{blockComplexity:this.getBlockComplexityForLevel(e),timePressure:this.getTimePressureForLevel(e),boardConstraints:this.getBoardConstraintsForLevel(e),specialMechanics:this.getSpecialMechanicsForLevel(e)},rewards:{primary:this.getPrimaryRewardForLevel(e),secondary:this.getSecondaryRewardForLevel(e)},description:this.getDescriptionForLevel(e,s),hints:this.getHintsForLevel(e,t)}}createCoreLevel(e,t){const r=this.getBaseScoreForLevel(e,t),s=this.getTierForLevel(e);return{id:e,name:`Core ${e}`,tier:s,difficulty:t,objectives:{scoreTarget:r,maxMoves:this.getMaxMovesForLevel(e,t),timeLimit:this.getTimeLimitForLevel(e,t),comboRequirement:this.getComboRequirementForLevel(e,t)},bonusObjectives:{perfectScore:Math.floor(r*1.3),speedBonus:Math.floor(r*.7),efficiencyBonus:Math.floor(this.getMaxMovesForLevel(e,t)*.6)},mechanics:{blockComplexity:this.getBlockComplexityForLevel(e),timePressure:this.getTimePressureForLevel(e),boardConstraints:this.getBoardConstraintsForLevel(e),specialMechanics:this.getSpecialMechanicsForLevel(e)},rewards:{primary:this.getPrimaryRewardForLevel(e),secondary:this.getSecondaryRewardForLevel(e)},description:this.getDescriptionForLevel(e,s),hints:this.getHintsForLevel(e,t)}}createAdvancedLevel(e,t){const r=this.getBaseScoreForLevel(e,t),s=this.getTierForLevel(e);return{id:e,name:`Advanced ${e}`,tier:s,difficulty:t,objectives:{scoreTarget:r,maxMoves:this.getMaxMovesForLevel(e,t),timeLimit:this.getTimeLimitForLevel(e,t),comboRequirement:this.getComboRequirementForLevel(e,t)},bonusObjectives:{perfectScore:Math.floor(r*1.4),speedBonus:Math.floor(r*.6),efficiencyBonus:Math.floor(this.getMaxMovesForLevel(e,t)*.5)},mechanics:{blockComplexity:this.getBlockComplexityForLevel(e),timePressure:this.getTimePressureForLevel(e),boardConstraints:this.getBoardConstraintsForLevel(e),specialMechanics:this.getSpecialMechanicsForLevel(e)},rewards:{primary:this.getPrimaryRewardForLevel(e),secondary:this.getSecondaryRewardForLevel(e)},description:this.getDescriptionForLevel(e,s),hints:this.getHintsForLevel(e,t)}}createExpertLevel(e,t){const r=this.getBaseScoreForLevel(e,t),s=this.getTierForLevel(e);return{id:e,name:`Expert ${e}`,tier:s,difficulty:t,objectives:{scoreTarget:r,maxMoves:this.getMaxMovesForLevel(e,t),timeLimit:this.getTimeLimitForLevel(e,t),comboRequirement:this.getComboRequirementForLevel(e,t)},bonusObjectives:{perfectScore:Math.floor(r*1.5),speedBonus:Math.floor(r*.5),efficiencyBonus:Math.floor(this.getMaxMovesForLevel(e,t)*.4)},mechanics:{blockComplexity:this.getBlockComplexityForLevel(e),timePressure:this.getTimePressureForLevel(e),boardConstraints:this.getBoardConstraintsForLevel(e),specialMechanics:this.getSpecialMechanicsForLevel(e)},rewards:{primary:this.getPrimaryRewardForLevel(e),secondary:this.getSecondaryRewardForLevel(e)},description:this.getDescriptionForLevel(e,s),hints:this.getHintsForLevel(e,t)}}getTierForLevel(e){return e<=8?"foundation":e<=16?"core":e<=24?"advanced":"expert"}getBaseScoreForLevel(e,t){const s={easy:100,normal:80,hard:60,expert:40}[t]||80;return Math.floor(s*Math.pow(1.15,e-1))}getMaxMovesForLevel(e,t){const s={easy:50,normal:40,hard:30,expert:25}[t]||40;return Math.max(10,Math.floor(s-(e-1)*1.5))}getTimeLimitForLevel(e,t){if(e<=8)return null;const s={easy:300,normal:240,hard:180,expert:120}[t]||240;return Math.max(60,Math.floor(s-(e-9)*10))}getComboRequirementForLevel(e,t){if(e<=5)return 0;const s={easy:2,normal:3,hard:4,expert:5}[t]||3;return Math.min(10,s+Math.floor((e-6)/3))}getBlockComplexityForLevel(e){return e<=5?"simple":e<=10?"medium":e<=15?"complex":e<=20?"expert":"master"}getTimePressureForLevel(e){return e<=8?"none":e<=12?"gentle":e<=16?"moderate":e<=20?"high":"extreme"}getBoardConstraintsForLevel(e){return e<=6?"none":e<=10?"light":e<=15?"moderate":e<=20?"heavy":"maximum"}getSpecialMechanicsForLevel(e){const t=[];return e>=7&&t.push("deadPixels"),e>=10&&t.push("petrification"),e>=15&&t.push("magicBlocks"),e>=18&&t.push("wildShapes"),e>=22&&t.push("rotationRestriction"),t}getPrimaryRewardForLevel(e){return e%5===0?"theme":e%3===0?"blockType":e%10===0?"gameMode":"scoreMultiplier"}getSecondaryRewardForLevel(e){return"achievement"}getDescriptionForLevel(e,t){const r={foundation:"Learn the basics of Blockdoku. Focus on placing blocks and clearing lines.",core:"Master the core gameplay mechanics. Work on efficiency and combos.",advanced:"Face advanced challenges with special mechanics and constraints.",expert:"Test your mastery with expert-level challenges and maximum difficulty."};return r[t]||r.foundation}getHintsForLevel(e,t){const s={easy:3,normal:2,hard:1,expert:0}[t]||2;return Math.max(0,s-Math.floor((e-1)/5))}loadProgress(){if(this.storage)try{const e=this.storage.loadProgressModeData();e&&(this.currentLevel=e.currentLevel||1,this.currentTier=e.currentTier||"foundation",this.completedLevels=new Set(e.completedLevels||[]),this.unlockedRewards=new Set(e.unlockedRewards||[]),this.achievements=new Map(e.achievements||[]))}catch(e){console.error("Error loading progress mode data:",e)}}saveProgress(){if(this.storage)try{const e={currentLevel:this.currentLevel,currentTier:this.currentTier,completedLevels:Array.from(this.completedLevels),unlockedRewards:Array.from(this.unlockedRewards),achievements:Array.from(this.achievements.entries())};this.storage.saveProgressModeData(e)}catch(e){console.error("Error saving progress mode data:",e)}}getCurrentLevel(){return this.currentLevel}getCurrentLevelDefinition(e="normal"){return this.levelDefinitions[e][this.currentLevel]}getLevelDefinition(e,t="normal"){return this.levelDefinitions[t][e]}canAccessLevel(e){return e===1||this.completedLevels.has(e-1)}completeLevel(e,t){if(!this.canAccessLevel(e))throw new Error(`Cannot complete level ${e} - previous level not completed`);this.completedLevels.add(e),this.checkAchievements(e,t),this.unlockRewards(e),e===this.currentLevel&&(this.currentLevel=e+1,this.currentTier=this.getTierForLevel(this.currentLevel)),this.saveProgress()}checkAchievements(e,t){const r=this.getLevelDefinition(e);t.score>=r.bonusObjectives.perfectScore&&this.achievements.set(`perfect_${e}`,{type:"perfect",level:e,timestamp:Date.now()}),t.timeUsed<=r.bonusObjectives.speedBonus&&this.achievements.set(`speed_${e}`,{type:"speed",level:e,timestamp:Date.now()}),t.movesUsed<=r.bonusObjectives.efficiencyBonus&&this.achievements.set(`efficiency_${e}`,{type:"efficiency",level:e,timestamp:Date.now()})}unlockRewards(e){const t=this.getLevelDefinition(e);t.rewards.primary&&this.unlockedRewards.add(`${t.rewards.primary}_${e}`),t.rewards.secondary&&this.unlockedRewards.add(`${t.rewards.secondary}_${e}`)}getCompletedLevels(){return Array.from(this.completedLevels)}getUnlockedRewards(){return Array.from(this.unlockedRewards)}getAchievements(){return Array.from(this.achievements.values())}getProgressStats(){const t=this.completedLevels.size,r=t/30*100;return{currentLevel:this.currentLevel,completedLevels:t,totalLevels:30,completionRate:r,achievements:this.achievements.size,unlockedRewards:this.unlockedRewards.size}}}export{i as L};
