const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./install-CYW7TF1w.js","./install-Oaqkipe7.css"])))=>i.map(i=>d[i]);
import{G as S,P as B}from"./install-CYW7TF1w.js";/* empty css             */const y="modulepreload",w=function(d,e){return new URL(d,e).href},p={},k=function(e,t,s){let n=Promise.resolve();if(t&&t.length>0){const o=document.getElementsByTagName("link"),l=document.querySelector("meta[property=csp-nonce]"),a=(l==null?void 0:l.nonce)||(l==null?void 0:l.getAttribute("nonce"));n=Promise.allSettled(t.map(c=>{if(c=w(c,s),c in p)return;p[c]=!0;const h=c.endsWith(".css"),m=h?'[rel="stylesheet"]':"";if(!!s)for(let u=o.length-1;u>=0;u--){const g=o[u];if(g.href===c&&(!h||g.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${c}"]${m}`))return;const r=document.createElement("link");if(r.rel=h?"stylesheet":y,h||(r.as="script"),r.crossOrigin="",r.href=c,a&&r.setAttribute("nonce",a),document.head.appendChild(r),h)return new Promise((u,g)=>{r.addEventListener("load",u),r.addEventListener("error",()=>g(new Error(`Unable to preload CSS for ${c}`)))})}))}function i(o){const l=new Event("vite:preloadError",{cancelable:!0});if(l.payload=o,window.dispatchEvent(l),!l.defaultPrevented)throw o}return n.then(o=>{for(const l of o||[])l.status==="rejected"&&i(l.reason);return e().catch(i)})};class E{constructor(){this.blockShapes=this.defineBlockShapes(),this.currentBlocks=[],this.selectedBlock=null,this.selectedBlockPosition=null}defineBlockShapes(){return{single:{name:"Single",shape:[[1]],color:"#007bff",points:1},line2:{name:"Line 2",shape:[[1,1]],color:"#28a745",points:2},line3:{name:"Line 3",shape:[[1,1,1]],color:"#28a745",points:3},l2x2:{name:"L 2x2",shape:[[1,0],[1,1]],color:"#dc3545",points:3},l3x2:{name:"L 3x2",shape:[[1,0],[1,0],[1,1]],color:"#dc3545",points:4},t3x2:{name:"T 3x2",shape:[[1,1,1],[0,1,0]],color:"#ffc107",points:4},square2x2:{name:"Square 2x2",shape:[[1,1],[1,1]],color:"#6f42c1",points:4},z3x2:{name:"Z 3x2",shape:[[1,1,0],[0,1,1]],color:"#fd7e14",points:4}}}generateRandomBlocks(e=3,t="all"){let s=Object.keys(this.blockShapes);t==="large"?s=s.filter(n=>{const i=this.blockShapes[n].shape;return Math.max(i.length,i[0].length)>=3}):t==="small"?s=s.filter(n=>{const i=this.blockShapes[n].shape;return Math.max(i.length,i[0].length)<=3}):t==="complex"&&(s=s.filter(n=>(this.blockShapes[n].shape,n.includes("L")||n.includes("T")||n.includes("Z")||n.includes("U")||n.includes("Cross")||n.includes("Plus")))),s.length===0&&(s=Object.keys(this.blockShapes)),this.currentBlocks=[];for(let n=0;n<e;n++){const i=s[Math.floor(Math.random()*s.length)],o={...this.blockShapes[i],id:`block_${n}_${Date.now()}`,rotation:0};this.currentBlocks.push(o)}return this.currentBlocks}rotateBlock(e){return e?{...e,shape:this.rotateMatrix(e.shape),rotation:(e.rotation+90)%360}:null}rotateMatrix(e){const t=e.length,s=e[0].length,n=[];for(let i=0;i<s;i++){n[i]=[];for(let o=0;o<t;o++)n[i][o]=e[t-1-o][i]}return n}canPlaceBlock(e,t,s,n){const i=e.shape,o=n.length;if(!e||!i||!n||!Array.isArray(n)||t<0||s<0||t+i.length>o||s+i[0].length>o)return!1;for(let l=0;l<i.length;l++)for(let a=0;a<i[l].length;a++)if(i[l][a]===1&&(t+l>=o||s+a>=o||!n[t+l]||n[t+l][s+a]===1))return!1;return!0}placeBlock(e,t,s,n){const i=e.shape,o=n.map(l=>[...l]);for(let l=0;l<i.length;l++)for(let a=0;a<i[l].length;a++)i[l][a]===1&&(o[t+l][s+a]=1);return o}removeBlock(e){this.currentBlocks=this.currentBlocks.filter(t=>t.id!==e)}getBlockById(e){return this.currentBlocks.find(t=>t.id===e)}clearSelection(){this.selectedBlock=null,this.selectedBlockPosition=null}}class C{constructor(e,t){this.container=document.getElementById(e),this.blockManager=t,this.selectedBlock=null,this.blockElements=new Map,this.init()}init(){this.render(),this.setupEventListeners()}render(){this.container&&(this.container.innerHTML=`
            <div class="block-palette">
                <h3>Available Blocks</h3>
                <div class="blocks-container" id="blocks-container">
                    <!-- Blocks will be rendered here -->
                </div>
            </div>
            <button id="rotate-selected" class="rotate-selected-btn" title="Rotate selected block">
                <span>â†»</span>
            </button>
        `)}updateBlocks(e){const t=document.getElementById("blocks-container");t&&(t.innerHTML="",this.blockElements.clear(),e.forEach(s=>{const n=this.createBlockElement(s);t.appendChild(n),this.blockElements.set(s.id,n)}))}createBlockElement(e){const t=document.createElement("div");t.className="block-item",t.dataset.blockId=e.id,t.title=`Click to select, double-click to rotate: ${e.name} (${e.points} pts)`;const s=document.createElement("div");s.className="block-shape";const n=document.createElement("div");n.className="block-preview",n.style.width=`${e.shape[0].length*20}px`,n.style.height=`${e.shape.length*20}px`;const i=document.createElement("canvas");i.width=e.shape[0].length*20,i.height=e.shape.length*20;const o=i.getContext("2d");o.fillStyle=e.color,o.strokeStyle=this.darkenColor(e.color),o.lineWidth=1;for(let l=0;l<e.shape.length;l++)for(let a=0;a<e.shape[l].length;a++)if(e.shape[l][a]===1){const c=a*20,h=l*20;o.fillRect(c,h,20,20),o.strokeRect(c,h,20,20)}return n.appendChild(i),s.appendChild(n),t.appendChild(s),t}setupEventListeners(){document.addEventListener("click",e=>{if(e.target.closest(".block-item")){const s=e.target.closest(".block-item").dataset.blockId;this.selectBlock(s)}e.target.closest("#rotate-selected")&&(e.preventDefault(),this.selectedBlock&&this.rotateBlock(this.selectedBlock.id))}),document.addEventListener("dblclick",e=>{if(e.target.closest(".block-item")){e.preventDefault();const s=e.target.closest(".block-item").dataset.blockId;this.rotateBlock(s)}}),document.addEventListener("touchstart",e=>{if(e.target.closest(".block-item")){const s=e.target.closest(".block-item").dataset.blockId;this.selectBlock(s),this.touchStart=e.touches[0],this.touchStartTime=Date.now()}},{passive:!0}),document.addEventListener("touchmove",e=>{if(this.touchStart&&e.target.closest(".block-item")){const t=e.touches[0],s=Math.abs(t.clientX-this.touchStart.clientX),n=Math.abs(t.clientY-this.touchStart.clientY),i=Date.now()-this.touchStartTime;(s>10||n>10||i>200)&&e.preventDefault()}},{passive:!1}),document.addEventListener("touchend",e=>{this.touchStart=null,this.touchStartTime=null},{passive:!0})}selectBlock(e){if(this.clearSelection(),this.selectedBlock=this.blockManager.getBlockById(e),this.selectedBlock){const t=this.blockElements.get(e);t&&t.classList.add("selected")}this.updateRotateButton(),this.dispatchSelectionEvent()}selectBlockById(e){this.selectBlock(e)}rotateBlock(e){const t=this.blockManager.getBlockById(e);if(!t)return;const s=this.blockManager.rotateBlock(t);if(s){const n=this.blockManager.currentBlocks.findIndex(i=>i.id===e);n!==-1&&(this.blockManager.currentBlocks[n]=s,this.updateBlocks(this.blockManager.currentBlocks),this.selectedBlock&&this.selectedBlock.id===e&&(this.selectedBlock=s,this.dispatchSelectionEvent()))}}clearSelection(){this.selectedBlock=null,this.blockElements.forEach(e=>{e.classList.remove("selected")}),this.updateRotateButton()}dispatchSelectionEvent(){const e=new CustomEvent("blockSelected",{detail:{block:this.selectedBlock}});document.dispatchEvent(e)}darkenColor(e){const t=e.replace("#",""),s=parseInt(t.substr(0,2),16),n=parseInt(t.substr(2,2),16),i=parseInt(t.substr(4,2),16),o=Math.max(0,s-30),l=Math.max(0,n-30),a=Math.max(0,i-30);return`rgb(${o}, ${l}, ${a})`}updateRotateButton(){const e=document.getElementById("rotate-selected");e&&(this.selectedBlock?(e.disabled=!1,e.classList.remove("disabled")):(e.disabled=!0,e.classList.add("disabled")))}getSelectedBlock(){return this.selectedBlock}}class M{constructor(){this.score=0,this.level=1,this.linesCleared=0,this.combo=0,this.maxCombo=0,this.basePoints={single:10,line:100,square:500,combo:50}}checkAndClearLines(e){const t={rows:[],columns:[],squares:[]};for(let s=0;s<e.length;s++)this.isRowComplete(e,s)&&t.rows.push(s);for(let s=0;s<e[0].length;s++)this.isColumnComplete(e,s)&&t.columns.push(s);for(let s=0;s<3;s++)for(let n=0;n<3;n++)this.isSquareComplete(e,s,n)&&t.squares.push({row:s,col:n});return t}isRowComplete(e,t){return e[t].every(s=>s===1)}isColumnComplete(e,t){return e.every(s=>s[t]===1)}isSquareComplete(e,t,s){const n=t*3,i=s*3;for(let o=n;o<n+3;o++)for(let l=i;l<i+3;l++)if(e[o][l]!==1)return!1;return!0}clearLines(e,t){let s=e.map(i=>[...i]),n=0;return t.rows.forEach(i=>{s[i]=new Array(e[0].length).fill(0),n++}),t.columns.forEach(i=>{for(let o=0;o<e.length;o++)s[o][i]=0;n++}),t.squares.forEach(i=>{const o=i.row*3,l=i.col*3;for(let a=o;a<o+3;a++)for(let c=l;c<l+3;c++)s[a][c]=0;n++}),n>0?(this.calculateScore(t),this.linesCleared+=n,this.combo++,this.maxCombo=Math.max(this.maxCombo,this.combo)):this.combo=0,{board:s,clearedCount:n,scoreGained:this.getLastScoreGained()}}calculateScore(e){let t=0;t+=e.rows.length*this.basePoints.line,t+=e.columns.length*this.basePoints.line,t+=e.squares.length*this.basePoints.square,this.combo>1&&(t+=(this.combo-1)*this.basePoints.combo),t*=this.level,this.score+=t,this.lastScoreGained=t;const s=Math.floor(this.score/1e3)+1;s>this.level&&(this.level=s)}getLastScoreGained(){return this.lastScoreGained||0}getScore(){return this.score}getLevel(){return this.level}getCombo(){return this.combo}getMaxCombo(){return this.maxCombo}getLinesCleared(){return this.linesCleared}reset(){this.score=0,this.level=1,this.linesCleared=0,this.combo=0,this.maxCombo=0,this.lastScoreGained=0}getStats(){return{score:this.score,level:this.level,linesCleared:this.linesCleared,combo:this.combo,maxCombo:this.maxCombo}}}class v{constructor(){this.isOnline=navigator.onLine,this.offlineIndicator=null,this.init()}init(){this.setupEventListeners(),this.createOfflineIndicator(),this.updateOfflineStatus()}setupEventListeners(){window.addEventListener("online",()=>{console.log("PWA: Back online"),this.isOnline=!0,this.updateOfflineStatus()}),window.addEventListener("offline",()=>{console.log("PWA: Gone offline"),this.isOnline=!1,this.updateOfflineStatus()}),document.addEventListener("visibilitychange",()=>{document.hidden?this.handleAppBlur():this.handleAppFocus()})}createOfflineIndicator(){this.offlineIndicator=document.createElement("div"),this.offlineIndicator.id="offline-indicator",this.offlineIndicator.className="offline-indicator",this.offlineIndicator.innerHTML="ðŸ“¡ Offline Mode",this.offlineIndicator.style.cssText=`
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #ff6b35;
            color: white;
            text-align: center;
            padding: 0.5rem;
            font-size: 0.9rem;
            font-weight: 500;
            z-index: 1000;
            transform: translateY(-100%);
            transition: transform 0.3s ease;
        `,document.body.appendChild(this.offlineIndicator)}updateOfflineStatus(){this.offlineIndicator&&(this.isOnline?(this.offlineIndicator.style.transform="translateY(-100%)",this.offlineIndicator.innerHTML="ðŸ“¡ Offline Mode"):(this.offlineIndicator.style.transform="translateY(0)",this.offlineIndicator.innerHTML="ðŸ“¡ Offline Mode - Game works without internet!"))}handleAppBlur(){console.log("PWA: App blurred")}handleAppFocus(){console.log("PWA: App focused")}isStandalone(){return window.matchMedia("(display-mode: standalone)").matches||window.navigator.standalone===!0}getStatus(){return{isOnline:this.isOnline,isStandalone:this.isStandalone(),supportsOffline:"serviceWorker"in navigator}}}const x=Object.freeze(Object.defineProperty({__proto__:null,OfflineManager:v},Symbol.toStringTag,{value:"Module"}));class L{constructor(){console.log("BlockdokuGame constructor called"),this.canvas=document.getElementById("game-board"),this.ctx=this.canvas.getContext("2d"),this.boardSize=9,this.cellSize=0,this.board=this.initializeBoard(),this.score=0,this.level=1,this.currentTheme="light",this.difficulty="normal",this.enableHints=!1,this.enableTimer=!1,this.enableUndo=!1,this.moveLimit=null,this.timeLimit=null,this.blockManager=new E,this.blockPalette=new C("block-palette",this.blockManager),this.scoringSystem=new M,this.storage=new S,this.pwaInstallManager=new B,this.offlineManager=new v,this.selectedBlock=null,this.previewPosition=null,this.isDragging=!1,this.dragStartPosition=null,this.dragCurrentPosition=null,this.dragBlockElement=null,this.loadSettings(),this.init(),this.setupResizeHandler()}resizeCanvas(){const e=this.canvas.parentElement;if(!e)return;const t=e.getBoundingClientRect(),s=Math.min(t.width,t.height);this.cellSize=Math.floor(s/this.boardSize),this.cellSize*this.boardSize,this.canvas.width=s,this.canvas.height=s,this.canvas.style.width=s+"px",this.canvas.style.height=s+"px",this.actualCellSize=s/this.boardSize,this.gridCellSize=this.cellSize,this.mouseCellSize=this.actualCellSize,this.ctx.imageSmoothingEnabled=!1,this.ctx.lineCap="square",this.ctx.lineJoin="miter"}setupResizeHandler(){window.addEventListener("resize",()=>{this.resizeCanvas(),requestAnimationFrame(()=>{this.drawBoard()})})}initializeBoard(){const e=[];for(let t=0;t<this.boardSize;t++){e[t]=[];for(let s=0;s<this.boardSize;s++)e[t][s]=0}return e}init(){console.log("Game init() called"),this.setupEventListeners(),this.registerServiceWorker(),this.generateNewBlocks(),setTimeout(()=>{this.resizeCanvas(),requestAnimationFrame(()=>{this.drawBoard(),this.updateUI()})},100),this.startGameLoop(),console.log("About to initialize PWA managers..."),this.initializePWAManagers().then(()=>{console.log("PWA managers initialization completed")}).catch(e=>{console.error("PWA managers initialization failed:",e)})}async registerServiceWorker(){if("serviceWorker"in navigator)try{const e=await navigator.serviceWorker.register("/public/sw.js");console.log("PWA: Service Worker registered successfully",e),e.addEventListener("updatefound",()=>{console.log("PWA: Service Worker update found")})}catch(e){console.error("PWA: Service Worker registration failed",e)}}async initializePWAManagers(){try{console.log("Initializing PWA managers...");const e=await k(()=>import("./install-CYW7TF1w.js").then(s=>s.i),__vite__mapDeps([0,1]),import.meta.url),t=await k(()=>Promise.resolve().then(()=>x),void 0,import.meta.url);this.pwaInstallManager=new e.PWAInstallManager,this.offlineManager=new t.OfflineManager,console.log("PWA managers initialized successfully"),console.log("PWAInstallManager:",this.pwaInstallManager),console.log("OfflineManager:",this.offlineManager)}catch(e){console.error("Error initializing PWA managers:",e),this.pwaInstallManager=null,this.offlineManager=null}}startGameLoop(){const e=()=>{this.update(),this.draw(),requestAnimationFrame(e)};e()}update(){}draw(){this.drawBoard()}setupEventListeners(){console.log("Setting up event listeners..."),this.canvas.addEventListener("click",o=>this.handleCanvasClick(o)),this.canvas.addEventListener("mousemove",o=>this.handleCanvasMouseMove(o)),this.canvas.addEventListener("mouseleave",()=>this.handleCanvasMouseLeave()),this.canvas.addEventListener("touchstart",o=>this.handleTouchStart(o),{passive:!1}),this.canvas.addEventListener("touchmove",o=>this.handleTouchMove(o),{passive:!1}),this.canvas.addEventListener("touchend",o=>this.handleTouchEnd(o),{passive:!1}),this.canvas.addEventListener("touchcancel",o=>this.handleTouchCancel(o),{passive:!1});const e=document.getElementById("settings-toggle");e?e.addEventListener("click",()=>{console.log("Settings button clicked - navigating to settings page"),window.location.href="settings.html"}):console.error("Settings toggle button not found!");const t=document.getElementById("new-game");t?t.addEventListener("click",()=>this.newGame()):console.error("New game button not found!");const s=document.getElementById("close-high-scores");s&&s.addEventListener("click",()=>this.hideHighScores());const n=document.getElementById("close-difficulty");n&&n.addEventListener("click",()=>this.hideDifficultyModal());const i=document.getElementById("close-settings");i&&i.addEventListener("click",()=>this.hideSettingsModal()),document.querySelectorAll(".difficulty-option").forEach(o=>{o.addEventListener("click",l=>this.selectDifficulty(l.currentTarget.dataset.difficulty))}),document.getElementById("enable-hints").addEventListener("change",o=>this.toggleSetting("hints",o.target.checked)),document.getElementById("enable-timer").addEventListener("change",o=>this.toggleSetting("timer",o.target.checked)),document.getElementById("enable-undo").addEventListener("change",o=>this.toggleSetting("undo",o.target.checked)),document.querySelectorAll(".theme-option").forEach(o=>{o.addEventListener("click",l=>this.selectTheme(l.currentTarget.dataset.theme))}),document.addEventListener("blockSelected",o=>this.handleBlockSelected(o))}handleCanvasClick(e){if(!this.selectedBlock)return;const t=this.canvas.getBoundingClientRect(),s=e.clientX-t.left,n=e.clientY-t.top,i=Math.floor(s/this.mouseCellSize),o=Math.floor(n/this.mouseCellSize);this.canPlaceBlock(o,i)&&this.placeBlock(o,i)}handleCanvasMouseMove(e){if(!this.selectedBlock)return;const t=this.canvas.getBoundingClientRect(),s=e.clientX-t.left,n=e.clientY-t.top,i=Math.floor(s/this.mouseCellSize),o=Math.floor(n/this.mouseCellSize);this.previewPosition={row:o,col:i},this.drawBoard()}handleCanvasMouseLeave(){this.previewPosition=null,this.drawBoard()}handleTouchStart(e){if(e.preventDefault(),!this.selectedBlock)return;const t=e.touches[0],s=this.canvas.getBoundingClientRect(),n=t.clientX-s.left,i=t.clientY-s.top;this.isDragging=!0,this.dragStartPosition={x:n,y:i},this.dragCurrentPosition={x:n,y:i},this.createDragElement();const o=Math.floor(n/this.mouseCellSize),l=Math.floor(i/this.mouseCellSize);this.previewPosition={row:l,col:o},this.drawBoard()}handleTouchMove(e){if(e.preventDefault(),!this.isDragging||!this.selectedBlock)return;const t=e.touches[0],s=this.canvas.getBoundingClientRect(),n=t.clientX-s.left,i=t.clientY-s.top;this.dragCurrentPosition={x:n,y:i},this.updateDragElement(n,i);const o=Math.floor(n/this.mouseCellSize),l=Math.floor(i/this.mouseCellSize);this.previewPosition={row:l,col:o},this.drawBoard()}handleTouchEnd(e){if(e.preventDefault(),!this.isDragging||!this.selectedBlock)return;const t=e.changedTouches[0],s=this.canvas.getBoundingClientRect(),n=t.clientX-s.left,i=t.clientY-s.top,o=Math.floor(n/this.mouseCellSize),l=Math.floor(i/this.mouseCellSize);this.canPlaceBlock(l,o)&&this.placeBlock(l,o),this.cleanupDrag()}handleTouchCancel(e){e.preventDefault(),this.cleanupDrag()}createDragElement(){this.dragBlockElement&&this.dragBlockElement.remove(),this.dragBlockElement=document.createElement("div"),this.dragBlockElement.className="drag-block-element",this.dragBlockElement.style.position="fixed",this.dragBlockElement.style.pointerEvents="none",this.dragBlockElement.style.zIndex="1000",this.dragBlockElement.style.opacity="0.8",this.dragBlockElement.style.transform="translate(-50%, -50%)";const e=document.createElement("canvas"),t=40;e.width=t,e.height=t;const s=e.getContext("2d");this.drawBlockOnCanvas(s,this.selectedBlock,t),this.dragBlockElement.appendChild(e),document.body.appendChild(this.dragBlockElement)}updateDragElement(e,t){this.dragBlockElement&&(this.dragBlockElement.style.left=`${e}px`,this.dragBlockElement.style.top=`${t}px`)}drawBlockOnCanvas(e,t,s){const n=s/Math.max(t.shape.length,t.shape[0].length);e.fillStyle=t.color,e.strokeStyle=this.darkenColor(t.color),e.lineWidth=1;for(let i=0;i<t.shape.length;i++)for(let o=0;o<t.shape[i].length;o++)if(t.shape[i][o]===1){const l=o*n,a=i*n;e.fillRect(l,a,n,n),e.strokeRect(l,a,n,n)}}darkenColor(e){const t=e.replace("#",""),s=Math.max(0,parseInt(t.substr(0,2),16)-30),n=Math.max(0,parseInt(t.substr(2,2),16)-30),i=Math.max(0,parseInt(t.substr(4,2),16)-30);return`#${s.toString(16).padStart(2,"0")}${n.toString(16).padStart(2,"0")}${i.toString(16).padStart(2,"0")}`}cleanupDrag(){this.isDragging=!1,this.dragStartPosition=null,this.dragCurrentPosition=null,this.previewPosition=null,this.dragBlockElement&&(this.dragBlockElement.remove(),this.dragBlockElement=null),this.drawBoard()}handleBlockSelected(e){this.selectedBlock=e.detail.block,this.previewPosition=null,this.drawBoard()}canPlaceBlock(e,t){return this.selectedBlock?this.blockManager.canPlaceBlock(this.selectedBlock,e,t,this.board):!1}generateNewBlocks(){const e=this.blockManager.generateRandomBlocks(3);this.blockPalette.updateBlocks(e),this.autoSelectNextBlock()}autoSelectNextBlock(){if(this.blockManager.currentBlocks.length>0){const e=this.blockManager.currentBlocks[0];this.selectedBlock=e,this.blockPalette.selectBlockById(e.id)}}toggleCell(e,t){this.board[e][t]=this.board[e][t]===0?1:0}drawBoard(){if(this.cellSize===0||this.canvas.width===0)return;const e=this.ctx,t=this.actualCellSize||this.cellSize;e.clearRect(0,0,this.canvas.width,this.canvas.height),e.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--board-bg"),e.fillRect(0,0,this.canvas.width,this.canvas.height),e.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--grid-line"),e.lineWidth=1;const s=this.canvas.width,n=this.canvas.height;for(let i=0;i<=this.boardSize;i++){const o=Math.round(i*t);e.beginPath(),e.moveTo(o,0),e.lineTo(o,n),e.stroke()}for(let i=0;i<=this.boardSize;i++){const o=Math.round(i*t);e.beginPath(),e.moveTo(0,o),e.lineTo(s,o),e.stroke()}e.lineWidth=2;for(let i=0;i<=3;i++){const o=Math.round(i*3*t),l=Math.round(i*3*t);e.beginPath(),e.moveTo(o,0),e.lineTo(o,n),e.stroke(),e.beginPath(),e.moveTo(0,l),e.lineTo(s,l),e.stroke()}e.fillStyle=getComputedStyle(document.documentElement).getPropertyValue("--block-color");for(let i=0;i<this.boardSize;i++)for(let o=0;o<this.boardSize;o++)if(this.board[i][o]===1){const l=Math.round(o*t)+1,a=Math.round(i*t)+1,c=Math.round(t)-2;e.fillRect(l,a,c,c),e.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue("--block-border"),e.lineWidth=1,e.strokeRect(l,a,c,c)}this.selectedBlock&&this.previewPosition&&this.drawPreviewBlock()}toggleTheme(){const e=["light","dark","wood"],s=(e.indexOf(this.currentTheme)+1)%e.length;this.applyTheme(e[s]),this.drawBoard()}selectTheme(e){this.applyTheme(e)}drawPreviewBlock(){if(!this.selectedBlock||!this.previewPosition)return;const e=this.ctx,t=this.actualCellSize||this.cellSize,s=this.selectedBlock.shape,n=this.previewPosition.row,i=this.previewPosition.col,o=this.canPlaceBlock(n,i);e.fillStyle=o?this.selectedBlock.color+"80":"#ff000080",e.strokeStyle=o?this.selectedBlock.color:"#ff0000",e.lineWidth=2;for(let l=0;l<s.length;l++)for(let a=0;a<s[l].length;a++)if(s[l][a]===1){const c=i+a,h=n+l;if(c>=0&&c<this.boardSize&&h>=0&&h<this.boardSize){const m=Math.round(c*t)+1,f=Math.round(h*t)+1,r=Math.round(t)-2;e.fillRect(m,f,r,r),e.strokeRect(m,f,r,r)}}}checkLineClears(){const e=this.scoringSystem.checkAndClearLines(this.board);if(e.rows.length>0||e.columns.length>0||e.squares.length>0){const t=this.scoringSystem.clearLines(this.board,e);this.board=t.board,this.score=this.scoringSystem.getScore(),this.level=this.scoringSystem.getLevel(),this.createLineClearEffect(e);const s=this.canvas.width/2,n=this.canvas.height/2;this.createScorePopup(s,n,t.scoreGained);const i=this.scoringSystem.getCombo();i>1&&this.createComboEffect(i,s,n+50),this.updateUI()}}newGame(){this.score>0&&this.checkHighScore(),this.board=this.initializeBoard(),this.scoringSystem.reset(),this.score=0,this.level=1,this.selectedBlock=null,this.previewPosition=null,this.generateNewBlocks(),this.drawBoard(),this.updateUI(),this.storage.clearGameState()}updateUI(){document.getElementById("score").textContent=this.score,document.getElementById("level").textContent=this.level,document.getElementById("combo").textContent=this.scoringSystem.getCombo()}createLineClearEffect(e){this.ctx.fillStyle="#ffff00",this.ctx.globalAlpha=.3,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.globalAlpha=1,setTimeout(()=>{this.drawBoard()},100)}createScorePopup(e,t,s){this.ctx.fillStyle="#00ff00",this.ctx.font="bold 24px Arial",this.ctx.textAlign="center",this.ctx.fillText(`+${s}`,e,t),setTimeout(()=>{this.drawBoard()},1e3)}createComboEffect(e,t,s){this.ctx.fillStyle="#ff6600",this.ctx.font="bold 20px Arial",this.ctx.textAlign="center",this.ctx.fillText(`${e}x COMBO!`,t,s),setTimeout(()=>{this.drawBoard()},1500)}loadSettings(){const e=this.storage.loadSettings();this.currentTheme=e.theme,this.applyTheme(e.theme)}loadGameState(){const e=this.storage.loadGameState();e&&(this.board=e.board||this.initializeBoard(),this.score=e.score||0,this.level=e.level||1,this.scoringSystem.score=this.score,this.scoringSystem.level=this.level,e.currentBlocks&&(this.blockManager.currentBlocks=e.currentBlocks,this.blockPalette.updateBlocks(e.currentBlocks)),e.selectedBlock&&(this.selectedBlock=e.selectedBlock))}saveGameState(){const e={board:this.board,score:this.score,level:this.level,currentBlocks:this.blockManager.currentBlocks,selectedBlock:this.selectedBlock};this.storage.saveGameState(e)}loadSettings(){if(this.storage){const e=this.storage.loadSettings();this.currentTheme=e.theme||"light",this.soundEnabled=e.soundEnabled!==!1,this.animationsEnabled=e.animationsEnabled!==!1,this.difficulty=e.difficulty||"normal",this.autoSave=e.autoSave!==!1,this.enableHints=e.enableHints||!1,this.enableTimer=e.enableTimer||!1,this.enableUndo=e.enableUndo||!1,this.showPoints=e.showPoints||!1,this.applyTheme(this.currentTheme),this.updateBlockPointsDisplay()}}saveSettings(){const e={theme:this.currentTheme,soundEnabled:this.soundEnabled,animationsEnabled:this.animationsEnabled,difficulty:this.difficulty,autoSave:this.autoSave,enableHints:this.enableHints,enableTimer:this.enableTimer,enableUndo:this.enableUndo,showPoints:this.showPoints};this.storage&&this.storage.saveSettings(e)}updateBlockPointsDisplay(){const e=this.showPoints||!1;document.querySelectorAll(".block-info").forEach(s=>{e?s.classList.add("show-points"):s.classList.remove("show-points")})}applyTheme(e){this.currentTheme=e;const t=document.getElementById("theme-css");t.href=`css/themes/${e}.css`,this.saveSettings()}checkHighScore(){const e=this.getStats();return this.storage.isHighScore(e.score)?(this.storage.saveHighScore(e),this.storage.saveStatistics(e),!0):!1}getHighScores(){return this.storage.getHighScores()}getStatistics(){return this.storage.loadStatistics()}checkGameOver(){if(this.blockManager.currentBlocks.length!==0){for(let e of this.blockManager.currentBlocks)for(let t=0;t<this.boardSize;t++)for(let s=0;s<this.boardSize;s++)if(this.blockManager.canPlaceBlock(e,t,s,this.board))return;this.gameOver()}}gameOver(){console.log("Game Over! Final Score:",this.score);const e=this.getStats();this.checkHighScore(),this.showGameOverModal(e),this.saveGameState()}showGameOverModal(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            z-index: 1000;
            font-family: Arial, sans-serif;
        `;const s=this.storage.isHighScore(e.score);t.innerHTML=`
            <h2>Game Over!</h2>
            <p>Final Score: ${e.score}</p>
            <p>Lines Cleared: ${e.linesCleared}</p>
            <p>Max Combo: ${e.maxCombo}</p>
            ${s?'<p style="color: #ffd700;">ðŸŽ‰ New High Score! ðŸŽ‰</p>':""}
            <button onclick="this.parentElement.remove(); game.newGame();" 
                    style="margin: 10px; padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;">
                New Game
            </button>
            <button onclick="this.parentElement.remove();" 
                    style="margin: 10px; padding: 10px 20px; background: #f44336; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Close
            </button>
        `,document.body.appendChild(t)}getStats(){return{score:this.score,level:this.level,linesCleared:this.scoringSystem.getTotalLinesCleared(),combo:this.scoringSystem.getCombo(),maxCombo:this.scoringSystem.getMaxCombo()}}showHighScores(){const e=document.getElementById("high-scores-modal"),t=document.getElementById("high-scores-list"),s=document.getElementById("statistics-display"),n=this.getHighScores();n.length===0?t.innerHTML="<p>No high scores yet. Play a game to set your first record!</p>":t.innerHTML=n.map((o,l)=>`
                <div class="score-item">
                    <span class="rank">#${l+1}</span>
                    <span class="score-value">${o.score.toLocaleString()}</span>
                    <span class="score-details">Level ${o.level} â€¢ ${o.linesCleared} lines â€¢ ${o.date}</span>
                </div>
            `).join("");const i=this.getStatistics();s.innerHTML=`
            <div class="stat-item">
                <span class="stat-label">Games Played:</span>
                <span class="stat-value">${i.gamesPlayed}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Total Score:</span>
                <span class="stat-value">${i.totalScore.toLocaleString()}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Best Score:</span>
                <span class="stat-value">${i.bestScore.toLocaleString()}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Total Lines:</span>
                <span class="stat-value">${i.totalLinesCleared}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Max Combo:</span>
                <span class="stat-value">${i.maxCombo}</span>
            </div>
        `,e.style.display="block"}hideHighScores(){const e=document.getElementById("high-scores-modal");e.style.display="none"}loadHighScores(){const e=document.getElementById("high-scores-list"),t=document.getElementById("statistics-display");if(!e||!t)return;const s=this.getHighScores();s.length===0?e.innerHTML="<p>No high scores yet. Play a game to set your first record!</p>":e.innerHTML=s.map((i,o)=>`
                <div class="score-item">
                    <span class="rank">#${o+1}</span>
                    <span class="score-value">${i.score.toLocaleString()}</span>
                    <span class="score-details">Level ${i.level} â€¢ ${i.linesCleared} lines â€¢ ${i.date}</span>
                </div>
            `).join("");const n=this.getStatistics();t.innerHTML=`
            <div class="stat-item">
                <span class="stat-label">Games Played:</span>
                <span class="stat-value">${n.gamesPlayed}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Total Score:</span>
                <span class="stat-value">${n.totalScore.toLocaleString()}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Best Score:</span>
                <span class="stat-value">${n.bestScore.toLocaleString()}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Total Lines:</span>
                <span class="stat-value">${n.totalLines}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Max Combo:</span>
                <span class="stat-value">${n.maxCombo}</span>
            </div>
        `}showDifficultyModal(){const e=document.getElementById("difficulty-modal");this.updateDifficultyUI(),e.style.display="block"}hideDifficultyModal(){const e=document.getElementById("difficulty-modal");e.style.display="none"}showSettingsModal(){console.log("showSettingsModal called");const e=document.getElementById("settings-modal");if(!e){console.error("Settings modal not found!");return}console.log("Settings modal found, showing..."),this.pwaInstallManager?(this.pwaInstallManager.createInstallButton(),this.pwaInstallManager.showInstallButton()):console.log("PWA Install Manager not available"),this.updateThemeUI(),this.updateDifficultyUI(),this.loadHighScores(),e.style.display="block",console.log("Settings modal should now be visible")}hideSettingsModal(){const e=document.getElementById("settings-modal");e.style.display="none"}updateDifficultyUI(){document.querySelectorAll(".difficulty-option").forEach(e=>{e.classList.remove("selected"),e.dataset.difficulty===this.difficulty&&e.classList.add("selected")}),document.getElementById("enable-hints").checked=this.enableHints,document.getElementById("enable-timer").checked=this.enableTimer,document.getElementById("enable-undo").checked=this.enableUndo}selectDifficulty(e){this.difficulty=e,this.applyDifficultySettings(),this.updateDifficultyUI(),this.saveSettings()}selectTheme(e){this.currentTheme=e,this.applyTheme(e),this.updateThemeUI(),this.saveSettings()}applyTheme(e){const t=document.getElementById("theme-css");t&&(t.href=`css/themes/${e}.css`)}updateThemeUI(){document.querySelectorAll(".theme-option").forEach(e=>{e.classList.remove("selected"),e.dataset.theme===this.currentTheme&&e.classList.add("selected")})}toggleSetting(e,t){switch(e){case"hints":this.enableHints=t;break;case"timer":this.enableTimer=t;break;case"undo":this.enableUndo=t;break}this.saveSettings()}applyDifficultySettings(){switch(this.difficulty){case"easy":this.enableHints=!0,this.enableTimer=!1,this.enableUndo=!0,this.moveLimit=null,this.timeLimit=null;break;case"normal":this.enableHints=!1,this.enableTimer=!1,this.enableUndo=!1,this.moveLimit=null,this.timeLimit=null;break;case"hard":this.enableHints=!1,this.enableTimer=!1,this.enableUndo=!1,this.moveLimit=50,this.timeLimit=null;break;case"expert":this.enableHints=!1,this.enableTimer=!0,this.enableUndo=!1,this.moveLimit=30,this.timeLimit=300;break}}generateNewBlocks(){let e=3,t="all";switch(this.difficulty){case"easy":e=3,t="large";break;case"normal":e=3,t="all";break;case"hard":e=4,t="small";break;case"expert":e=5,t="complex";break}const s=this.blockManager.generateRandomBlocks(e,t);this.blockPalette.updateBlocks(s),this.updateBlockPointsDisplay(),this.autoSelectNextBlock()}placeBlock(e,t){this.canPlaceBlock(e,t)&&(this.board=this.blockManager.placeBlock(this.selectedBlock,e,t,this.board),this.blockManager.removeBlock(this.selectedBlock.id),this.selectedBlock=null,this.previewPosition=null,this.blockPalette.updateBlocks(this.blockManager.currentBlocks),this.drawBoard(),this.updateUI(),this.checkLineClears(),this.autoSave&&this.saveGameState(),this.blockManager.currentBlocks.length===0&&this.generateNewBlocks(),this.checkGameOver(),this.autoSelectNextBlock())}checkGameOver(){if(this.blockManager.currentBlocks.length!==0){for(let e of this.blockManager.currentBlocks)for(let t=0;t<this.boardSize;t++)for(let s=0;s<this.boardSize;s++)if(this.blockManager.canPlaceBlock(e,t,s,this.board))return;this.gameOver()}}}function b(){window.game=new L}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",b):b();
