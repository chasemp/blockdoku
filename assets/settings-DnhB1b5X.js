import"./wood-BSoGWpSl.js";import{G as u,C as m,P as g}from"./confirmation-dialog-Cex0sZaK.js";import{b as c}from"./build-info-Dwp5dZmk.js";class f{constructor(){this.storage=new u,this.currentTheme="wood",this.currentDifficulty="normal",this.settings=this.storage.loadSettings(),this.pwaInstallManager=null,this.confirmationDialog=new m,this.init()}init(){this.loadSettings(),this.setupEventListeners(),this.updateUI(),this.updateBuildInfo(),this.initializePWA()}initializePWA(){try{this.pwaInstallManager=new g,console.log("PWA Install Manager initialized in settings")}catch(e){console.error("Failed to initialize PWA Install Manager:",e)}}loadSettings(){this.currentTheme=this.settings.theme||"wood",this.currentDifficulty=this.settings.difficulty||"normal",this.applyTheme(this.currentTheme),this.loadEffectsSettings(),this.updateDifficultyUI()}loadEffectsSettings(){const e=document.getElementById("sound-enabled");e&&(e.checked=this.settings.soundEnabled===!0);const t=document.getElementById("animations-enabled");t&&(t.checked=this.settings.animationsEnabled!==!1);const a=document.getElementById("particles-enabled");a&&(a.checked=this.settings.particlesEnabled!==!1);const n=document.getElementById("haptic-enabled");n&&(n.checked=this.settings.hapticEnabled!==!1);const s=document.getElementById("enable-hints");s&&(s.checked=this.settings.enableHints===!0);const i=document.getElementById("enable-timer");i&&(i.checked=this.settings.enableTimer===!0);const o=document.getElementById("auto-save");o&&(o.checked=this.settings.autoSave!==!1);const l=document.getElementById("show-points");l&&(l.checked=this.settings.showPoints===!0);const d=document.getElementById("show-high-score");d&&(d.checked=this.settings.showHighScore===!0);const r=document.getElementById("combo-display-mode");if(r){const h=this.settings.comboDisplayMode||"streak";r.value=h}}setupEventListeners(){document.querySelectorAll(".nav-item").forEach(s=>{const i=o=>{o.preventDefault(),this.showSection(s.dataset.section)};s.addEventListener("click",i),s.addEventListener("touchstart",o=>{o.preventDefault(),i(o)},{passive:!1})}),document.querySelectorAll(".theme-option").forEach(s=>{const i=o=>{this.selectTheme(o.currentTarget.dataset.theme)};s.addEventListener("click",i),s.addEventListener("touchstart",o=>{o.preventDefault(),i(o)},{passive:!1})}),document.querySelectorAll(".difficulty-option").forEach(s=>{const i=async o=>{await this.selectDifficulty(o.currentTarget.dataset.difficulty)};s.addEventListener("click",i),s.addEventListener("touchstart",async o=>{o.preventDefault(),await i(o)},{passive:!1})}),document.getElementById("enable-hints").addEventListener("change",s=>{this.updateSetting("enableHints",s.target.checked)}),document.getElementById("enable-timer").addEventListener("change",s=>{this.updateSetting("enableTimer",s.target.checked)}),document.getElementById("sound-enabled").addEventListener("change",s=>{this.updateSetting("soundEnabled",s.target.checked)}),document.getElementById("animations-enabled").addEventListener("change",s=>{this.updateSetting("animationsEnabled",s.target.checked)}),document.getElementById("auto-save").addEventListener("change",s=>{this.updateSetting("autoSave",s.target.checked)}),document.getElementById("show-points").addEventListener("change",s=>{this.updateSetting("showPoints",s.target.checked),this.updateBlockPointsDisplay()});const e=document.getElementById("show-high-score");e&&e.addEventListener("change",s=>{this.updateSetting("showHighScore",s.target.checked)});const t=document.getElementById("combo-display-mode");t&&t.addEventListener("change",s=>{const i=s.target.value==="cumulative"?"cumulative":"streak";this.updateSetting("comboDisplayMode",i)}),document.getElementById("particles-enabled").addEventListener("change",s=>{this.updateSetting("particlesEnabled",s.target.checked)}),document.getElementById("haptic-enabled").addEventListener("change",s=>{this.updateSetting("hapticEnabled",s.target.checked)});const a=document.getElementById("share-button");a&&a.addEventListener("click",()=>{this.shareGame()});const n=document.getElementById("reset-stats");n&&n.addEventListener("click",async()=>{if(await this.confirmationDialog.show("This will permanently delete your game statistics (games played, totals, best score). Your high scores and settings will not be affected. Continue?")){this.storage.clearStatistics();try{this.loadHighScores()}catch{}this.showNotification("Statistics reset")}})}showSection(e){document.querySelectorAll(".nav-item").forEach(t=>{t.classList.remove("active")}),document.querySelector(`[data-section="${e}"]`).classList.add("active"),document.querySelectorAll(".settings-section").forEach(t=>{t.classList.remove("active")}),document.getElementById(`${e}-section`).classList.add("active"),e==="scores"&&this.loadHighScores()}selectTheme(e){this.currentTheme=e,this.applyTheme(e),this.updateThemeUI(),this.updateDifficultyUI(),this.saveSettings()}applyTheme(e){let t=document.getElementById("theme-css");t||(t=document.createElement("link"),t.rel="stylesheet",t.id="theme-css",document.head.appendChild(t)),t.href=`css/themes/${e}.css`;try{Array.from(document.querySelectorAll('link[rel="stylesheet"]')).filter(i=>(i.getAttribute("href")||"").includes("/assets/wood-")||(i.href||"").includes("/assets/wood-")).forEach(i=>{i.disabled=e!=="wood"})}catch{}const a=document.getElementById("theme-css-light"),n=document.getElementById("theme-css-dark");a&&(a.media="all"),n&&(n.media="all"),document.documentElement.setAttribute("data-theme",e),document.body.className=document.body.className.replace(/light-theme|dark-theme|wood-theme/g,""),document.body.classList.add(`${e}-theme`)}async selectDifficulty(e){var n;const t=localStorage.getItem(((n=this.storage)==null?void 0:n.storageKey)||"blockdoku_game_data");let a=!1;if(t)try{const s=JSON.parse(t);a=s.score>0||s.board.some(i=>i.some(o=>o===1))}catch{a=!1}if(a&&!await this.confirmationDialog.show(`Changing difficulty to ${e.toUpperCase()} will reset your current game and you'll lose your progress. Are you sure you want to continue?`)){this.updateDifficultyUI();return}this.currentDifficulty=e,this.updateDifficultyUI(),this.saveSettings(),window.parent&&window.parent!==window?window.parent.postMessage({type:"difficultyChanged",difficulty:e},"*"):localStorage.setItem("blockdoku_pending_difficulty",e)}updateSetting(e,t){this.settings[e]=t,this.saveSettings()}updateUI(){this.updateThemeUI(),this.updateDifficultyUI(),this.updateGameSettingsUI()}updateThemeUI(){document.querySelectorAll(".theme-option").forEach(e=>{e.classList.remove("selected"),e.dataset.theme===this.currentTheme&&e.classList.add("selected")})}updateDifficultyUI(){document.querySelectorAll(".difficulty-option").forEach(e=>{if(e.classList.remove("selected"),e.dataset.difficulty===this.currentDifficulty)if(e.classList.add("selected"),this.currentTheme==="light"){e.style.color="white",e.style.textShadow="0 1px 2px rgba(0, 0, 0, 0.7)";const t=e.querySelector("h4");t&&(t.style.color="white",t.style.textShadow="0 1px 2px rgba(0, 0, 0, 0.7)");const a=e.querySelector("p");a&&(a.style.color="white",a.style.textShadow="0 1px 2px rgba(0, 0, 0, 0.7)")}else{e.style.color="",e.style.textShadow="";const t=e.querySelector("h4");t&&(t.style.color="",t.style.textShadow="");const a=e.querySelector("p");a&&(a.style.color="",a.style.textShadow="")}})}updateGameSettingsUI(){document.getElementById("enable-hints").checked=this.settings.enableHints||!1,document.getElementById("enable-timer").checked=this.settings.enableTimer||!1,document.getElementById("auto-save").checked=this.settings.autoSave!==!1,document.getElementById("show-points").checked=this.settings.showPoints||!1,this.loadEffectsSettings()}updateBlockPointsDisplay(){const e=this.settings.showPoints||!1;document.querySelectorAll(".block-info").forEach(a=>{e?a.classList.add("show-points"):a.classList.remove("show-points")})}updateBuildInfo(){const e=()=>{if(c.isLoaded()){const t=document.getElementById("version-display"),a=document.getElementById("build-info");t&&(t.textContent=c.getDisplayVersion()),a&&(a.textContent=`Build: ${c.getBuildId()} (${c.getFormattedBuildDate()})`)}else setTimeout(e,100)};e()}loadHighScores(){const e=document.getElementById("high-scores-list"),t=document.getElementById("statistics-display"),a=this.storage.getHighScores(),n=this.storage.loadStatistics();a.length===0?e.innerHTML="<p>No high scores yet. Play a game to set your first record!</p>":e.innerHTML=a.map((s,i)=>`
                <div class="score-item">
                    <div class="rank">#${i+1}</div>
                    <div class="score-value">${s.score}</div>
                    <div class="score-details">${(s.difficulty||"normal").toUpperCase()} • Level ${s.level} • ${new Date(s.date).toLocaleDateString()}</div>
                </div>
            `).join(""),t.innerHTML=`
            <div class="stat-item">
                <span class="stat-label">Games Played:</span>
                <span class="stat-value">${n.gamesPlayed}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Total Score:</span>
                <span class="stat-value">${n.totalScore}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Best Score:</span>
                <span class="stat-value">${n.bestScore}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Total Lines:</span>
                <span class="stat-value">${n.totalLinesCleared}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Max Combo:</span>
                <span class="stat-value">${n.maxCombo}</span>
            </div>
        `}saveSettings(){const e={...this.settings,theme:this.currentTheme,difficulty:this.currentDifficulty};this.storage.saveSettings(e)}shareGame(){const e="https://blockdoku.523.life",t="Blockdoku - A Progressive Web App Puzzle Game";navigator.share?navigator.share({title:t,text:"Check out this awesome Blockdoku puzzle game!",url:e}).catch(n=>{console.log("Error sharing:",n),this.fallbackShare(e,t)}):this.fallbackShare(e,t)}fallbackShare(e,t){navigator.clipboard.writeText(e).then(()=>{this.showNotification("Game URL copied to clipboard!")}).catch(()=>{alert(`Share this game: ${e}`)})}showNotification(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--primary-color, #007bff);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            font-weight: 500;
            animation: slideIn 0.3s ease;
        `,t.textContent=e;const a=document.createElement("style");a.textContent=`
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `,document.head.appendChild(a),document.body.appendChild(t),setTimeout(()=>{t.remove(),a.remove()},3e3)}}document.addEventListener("DOMContentLoaded",()=>{new f});
